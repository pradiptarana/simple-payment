// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pradiptarana/simple-payment/repository (interfaces: PayoutRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/pradiptarana/simple-payment/model"
)

// MockPayoutRepository is a mock of PayoutRepository interface.
type MockPayoutRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPayoutRepositoryMockRecorder
}

// MockPayoutRepositoryMockRecorder is the mock recorder for MockPayoutRepository.
type MockPayoutRepositoryMockRecorder struct {
	mock *MockPayoutRepository
}

// NewMockPayoutRepository creates a new mock instance.
func NewMockPayoutRepository(ctrl *gomock.Controller) *MockPayoutRepository {
	mock := &MockPayoutRepository{ctrl: ctrl}
	mock.recorder = &MockPayoutRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPayoutRepository) EXPECT() *MockPayoutRepositoryMockRecorder {
	return m.recorder
}

// CreateTransaction mocks base method.
func (m *MockPayoutRepository) CreateTransaction(arg0 *model.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockPayoutRepositoryMockRecorder) CreateTransaction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockPayoutRepository)(nil).CreateTransaction), arg0)
}

// GetAccountValidation mocks base method.
func (m *MockPayoutRepository) GetAccountValidation(arg0 *model.AccountValidationRequest) (*model.BankAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountValidation", arg0)
	ret0, _ := ret[0].(*model.BankAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountValidation indicates an expected call of GetAccountValidation.
func (mr *MockPayoutRepositoryMockRecorder) GetAccountValidation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountValidation", reflect.TypeOf((*MockPayoutRepository)(nil).GetAccountValidation), arg0)
}

// Payout mocks base method.
func (m *MockPayoutRepository) Payout(arg0 *model.PayoutRequest) (*model.BankPayoutResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Payout", arg0)
	ret0, _ := ret[0].(*model.BankPayoutResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Payout indicates an expected call of Payout.
func (mr *MockPayoutRepositoryMockRecorder) Payout(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Payout", reflect.TypeOf((*MockPayoutRepository)(nil).Payout), arg0)
}

// UpdateTransaction mocks base method.
func (m *MockPayoutRepository) UpdateTransaction(arg0 *model.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransaction", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTransaction indicates an expected call of UpdateTransaction.
func (mr *MockPayoutRepositoryMockRecorder) UpdateTransaction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransaction", reflect.TypeOf((*MockPayoutRepository)(nil).UpdateTransaction), arg0)
}
